const { SlashCommandBuilder, AttachmentBuilder } = require('discord.js');
const { createTranscript } = require('discord-html-transcripts');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('transcript')
        .setDescription('Generate a transcript of the current ticket')
        .addStringOption(option =>
            option.setName('format')
                .setDescription('The format of the transcript')
                .setRequired(false)
                .addChoices(
                    { name: 'HTML', value: 'html' },
                    { name: 'Text', value: 'text' }
                )),

    async execute(interaction) {
        const { channel, client } = interaction;
        const ticket = client.tickets.get(channel.id) || 
                      client.archivedTickets.get(channel.id);

        if (!ticket) {
            return interaction.reply({
                content: 'This command can only be used in ticket channels!',
                ephemeral: true
            });
        }

        // Check permissions
        const hasPermission = interaction.member.roles.cache
            .some(role => 
                client.config.staffRoles.includes(role.id) ||
                role.id === client.config.adminRole
            ) || 
            ticket.userId === interaction.user.id;

        if (!hasPermission) {
            return interaction.reply({
                content: 'You can only generate transcripts for your own tickets!',
                ephemeral: true
            });
        }

        await interaction.deferReply();

        try {
            const format = interaction.options.getString('format') || 'html';

            if (format === 'html') {
                // Generate HTML transcript
                const transcript = await createTranscript(channel, {
                    limit: -1,
                    returnBuffer: false,
                    filename: `transcript-${ticket.id}.html`,
                    poweredBy: false,
                    footerText: `Ticket ${ticket.id} - Generated by ${interaction.user.tag}`,
                });

                await interaction.editReply({
                    content: 'Here is your ticket transcript:',
                    files: [transcript]
                });
            } else {
                // Generate text transcript
                const messages = await channel.messages.fetch({ limit: 100 });
                let transcriptText = `Ticket Transcript - #${ticket.id}\n`;
                transcriptText += `Generated by: ${interaction.user.tag}\n`;
                transcriptText += `Date: ${new Date().toISOString()}\n\n`;

                const orderedMessages = Array.from(messages.values()).reverse();
                
                for (const message of orderedMessages) {
                    const timestamp = message.createdAt.toISOString();
                    const author = message.author.tag;
                    const content = message.content || '[no content]';
                    
                    transcriptText += `[${timestamp}] ${author}: ${content}\n`;
                    
                    // Add attachments
                    if (message.attachments.size > 0) {
                        message.attachments.forEach(attachment => {
                            transcriptText += `[Attachment: ${attachment.url}]\n`;
                        });
                    }
                    
                    // Add embeds
                    if (message.embeds.length > 0) {
                        message.embeds.forEach(embed => {
                            if (embed.title) transcriptText += `[Embed Title: ${embed.title}]\n`;
                            if (embed.description) transcriptText += `[Embed Description: ${embed.description}]\n`;
                        });
                    }
                    
                    transcriptText += '\n';
                }

                const buffer = Buffer.from(transcriptText, 'utf-8');
                const attachment = new AttachmentBuilder(buffer, {
                    name: `transcript-${ticket.id}.txt`
                });

                await interaction.editReply({
                    content: 'Here is your ticket transcript:',
                    files: [attachment]
                });
            }

            // Log transcript generation
            if (client.config.logging?.transcriptLogs) {
                const logChannel = await interaction.guild.channels.fetch(client.config.logging.transcriptLogs)
                    .catch(() => null);

                if (logChannel) {
                    await logChannel.send({
                        content: `Transcript generated for ticket #${ticket.id} by ${interaction.user} (${interaction.user.tag})`
                    });
                }
            }
        } catch (error) {
            console.error('Error generating transcript:', error);
            await interaction.editReply({
                content: 'There was an error generating the transcript.',
                ephemeral: true
            });
        }
    },
};