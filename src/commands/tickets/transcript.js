const { SlashCommandBuilder } = require('discord.js');
const { createTranscript } = require('discord-html-transcripts');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('transcript')
        .setDescription('Generate a transcript of the current ticket')
        .addBooleanOption(option =>
            option.setName('include-hidden')
                .setDescription('Include messages from after the ticket was closed')
                .setRequired(false)),

    async execute(interaction) {
        const { channel, client } = interaction;
        const ticket = client.tickets.get(channel.id);
        const includeHidden = interaction.options.getBoolean('include-hidden') || false;

        if (!ticket) {
            return interaction.reply({
                content: 'This command can only be used in ticket channels!',
                ephemeral: true
            });
        }

        // Check permissions
        const hasPermission = interaction.member.roles.cache
            .some(role => 
                client.config.staffRoles.includes(role.id) ||
                role.id === client.config.adminRole
            ) || interaction.user.id === ticket.userId;

        if (!hasPermission) {
            return interaction.reply({
                content: 'You do not have permission to generate transcripts!',
                ephemeral: true
            });
        }

        await interaction.deferReply();

        try {
            const transcript = await createTranscript(channel, {
                limit: -1,
                fileName: `ticket-${ticket.id}-transcript.html`,
                poweredBy: false,
                headerText: `Ticket #${ticket.id} Transcript`,
            });

            const transcriptChannel = await interaction.guild.channels.fetch(client.config.ticketSettings.transcriptChannelId);
            const message = await transcriptChannel.send({
                content: `Transcript for ticket #${ticket.id} generated by ${interaction.user}`,
                files: [transcript],
            });

            // If ticket is closed and user isn't staff, make transcript expire
            if (ticket.closed && !interaction.member.roles.cache.some(role => 
                client.config.staffRoles.includes(role.id))) {
                setTimeout(() => {
                    if (message.deletable) {
                        message.delete().catch(console.error);
                    }
                }, client.config.ticketSettings.transcriptExpiryHours * 3600000);
            }

            // Log transcript generation
            const logChannel = await interaction.guild.channels.fetch(client.config.ticketSettings.logChannelId);
            if (logChannel) {
                await logChannel.send({
                    embeds: [{
                        color: parseInt(client.config.embeds.color.replace('#', ''), 16),
                        title: 'Transcript Generated',
                        description: `${interaction.user} generated a transcript for ticket #${ticket.id}`,
                        fields: [
                            { name: 'Status', value: ticket.closed ? 'Closed' : 'Open', inline: true },
                            { name: 'Creator', value: `<@${ticket.userId}>`, inline: true },
                            { name: 'Access Link', value: `[Click here](${message.url})`, inline: true }
                        ],
                        timestamp: new Date()
                    }]
                });
            }

            return interaction.editReply({
                content: `Transcript generated! You can access it here: ${message.url}${
                    ticket.closed ? `\nThis transcript will be automatically deleted in ${client.config.ticketSettings.transcriptExpiryHours} hours.` : ''
                }`,
            });
        } catch (error) {
            console.error('Error generating transcript:', error);
            return interaction.editReply({
                content: 'There was an error generating the transcript.',
                ephemeral: true
            });
        }
    },
};